@page "/dadjoke"
@rendermode InteractiveServer
@implements IAsyncDisposable;
@using System.Net.Http.Headers;
@inject IJSRuntime JS;
<PageTitle>Counter</PageTitle>

<style>
    .d-flex {
      gap: 10%;  
    }
    
</style>

<article class="container d-flex">
    <section class="col-6" style="margin-top: 15%">
        <h1 class="row">Get a Dad Joke</h1>
        <code class="row" role="status"> git commit -m "@dadJoke"</code>
        <button class="btn btn-primary row mt-5" style="width: 100%" id="copyButton" @onclick="copyToClipboard">Copy Commit Message</button>
    </section>
    
    <section class="container col-4 card" style="padding: 17% 5%; background-color: lightgray">
        <div class="form-group row">
            <label for="commitType" class="pb-1">Type Of Commit:</label>
            <select class="form-control form-select" id="commitType" @bind="selectedCommitType">
              <option value="" selected>any</option>
              @if (jokeTypes != null)
              {
                  @foreach (var option in jokeTypes)
                  {
                      <option value="@option.TypeName">@option.TypeName</option>
                  }
              }
            </select>
            <button class="btn btn-primary mt-4" style="width: 100%" @onclick:preventDefault="true" @onclick="() => GetDadJoke(selectedCommitType)">Get Joke</button>
          </div>
    </section>
</article>

<h4> @message </h4>

<script src="./Components/Pages/Dadjoke.razor.js"/>


@code {
    private object dadJoke = "The amazingly funny joke will display here!";
    private string ApiRoot = GlobalVariables.ApiRoot;
    private JokeType[]? jokeTypes;
    private string? message;
    private string selectedCommitType = "";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        

        var client = new HttpClient();
        client.BaseAddress = new Uri($"{ApiRoot}/jokeType/all");


        // Add an Accept header for JSON format.
        client.DefaultRequestHeaders.Accept.Add(
        new MediaTypeWithQualityHeaderValue("application/json"));
        if (GlobalVariables.AccessToken == null)
        {
            message = "Please sign in on the home page";
        }else{
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(GlobalVariables.AccessToken);
        }
        // Get data response
        var response = client.GetAsync("").Result;

        if (response.IsSuccessStatusCode)
        {
            // Parse the response body
            string[]? types = await response.Content.ReadFromJsonAsync<string[]>();
            if (types != null){
                jokeTypes = Enumerable.Range(1, types.Length-1).Select(index => new JokeType
            {
                ID = index,
                TypeName = types[index],
            }).ToArray();
            }
        }
        else
        {
            message = "Something went wrong in fetching the types, you can just get a random joke at this time";
        }


    }
    private IJSObjectReference? module;
    private async Task copyToClipboard()
    {
            await JS.InvokeVoidAsync("copyClipboard", dadJoke);
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
    private class JokeType
    {
        public int ID { get; set; }
        public string? TypeName { get; set; }
    }


    private async void GetDadJoke(string? jokeType)
    {
        if (string.IsNullOrEmpty(jokeType))
        {
            jokeType = "random";
        }
        
        Dictionary<string, object> result = await GetFromDadJokeAPI(jokeType);
        
        if (!result.ContainsKey("story"))
        {
            dadJoke = "Why did the software engineer not submit a commit message? Because he couldn't commit to one";
            
            message = "No dad joke exists for this type. Maybe you can be the first to submit one?";
        } 
        else 
        {
            message = "";
            dadJoke = result["story"];
        }
    }

    public async Task<Dictionary<string, object>> GetFromDadJokeAPI(string jokeType)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri($"{ApiRoot}/joke?jokeType={jokeType}");


        // Add an Accept header for JSON format.
        client.DefaultRequestHeaders.Accept.Add(
        new MediaTypeWithQualityHeaderValue("application/json"));
        if (GlobalVariables.AccessToken == null)
        {
            message = "please sign in on the home page";
        }
        else
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(GlobalVariables.AccessToken);
        }
        // Get data response
        var response = client.GetAsync("").Result;

        if (response.IsSuccessStatusCode)
        {
            // Parse the response body
            var dataObjects = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
            if (dataObjects == null)
            {
                dataObjects = new Dictionary<string, object>();
            }
            return dataObjects;

        }
        else
        {
            Dictionary<string, object> res = new Dictionary<string, object>(1);
            res.Add("joke", response.StatusCode);
            return res;
        }
    }

}
