@page "/"
@using System.Net.Http.Headers
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<style>
    article {
      display: flex;
    }
    
    p {
      color: #989898;
    }
    
</style>

<article>
    <section>
        <h1>Commit Messages As Funny As Your Code</h1>
        <p>Tired of writing helpful commit messages? Well, you've come to the right place. Sign In and head on over to the Dad Joke section to get a dad joke to use as a commit message</p>
        <a href=@url target="_blank">
            <button class="btn btn-primary" id="oauth">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-google" viewBox="0 0 16 16" style="margin-right: 5px;">
                    <path d="M15.545 6.558a9.4 9.4 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.7 7.7 0 0 1 5.352 2.082l-2.284 2.284A4.35 4.35 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.8 4.8 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.7 3.7 0 0 0 1.599-2.431H8v-3.08z"/>
                </svg>
                Sign In
            </button>
        </a>
        <button class="btn btn-primary" @onclick="LogOut">
            Log Out
        </button>
        <p style="color: black">@message</p>
    </section>
  
    <section>
        <img src="/images/jelly-character-chooses-one-of-the-suggested-options.png" alt="">
    </section>
</article>

@code {
    static string? clientSecret = Environment.GetEnvironmentVariable("CLIENT_SECRET");
    static string? clientID = Environment.GetEnvironmentVariable("CLIENT_ID");


    object url = $"https://accounts.google.com/o/oauth2/auth?response_type=code&client_id={clientID}&scope=openid%20profile%20email&redirect_uri={GlobalVariables.RedirectURL}";

    object message = "";

    [SupplyParameterFromQuery(Name = "code")]
    public string? authcode { get; set; }
    
    [Inject]
    NavigationManager NavigationManager { get; set; }

    protected override async void OnInitialized()
    {
        if (clientSecret is null)
        {
            Console.WriteLine("Environment Variable 'CLIENT_SECRET' is not set.");
            Environment.Exit(0);
        }
        if (clientID is null)
        {
            Console.WriteLine("Environment Variable 'CLIENT_ID' is not set.");
            Environment.Exit(0);
        }


        if (authcode != null)
        {
            message = "We are processing your sign in...";

            var client = new HttpClient();

            string uri = $"https://oauth2.googleapis.com/token?client_id={clientID}&client_secret={clientSecret}&redirect_uri={GlobalVariables.RedirectURL}&grant_type=authorization_code&code={authcode}";

            client.BaseAddress = new Uri(uri);

            // Add an Accept header for JSON format.
            client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));
            // Get data response
            var response = client.PostAsync(client.BaseAddress, null).Result;

            if (GlobalVariables.IsAccessTokenValid())
            {
                message = "Successfully signed in!";
            }else if (response.IsSuccessStatusCode)
            
            {
                //Parse the response body
                var dataObjects = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                if (dataObjects == null)
                {
                    dataObjects = new Dictionary<string, object>();
                }
                GlobalVariables.AccessToken = dataObjects["access_token"].ToString();
                if (GlobalVariables.AccessToken != null)
                {
                    message = "Successfully signed in!";
                }
                else
                {
                    message = "Oauth failed - the token got recieved from Google but the server failed to save it";
                }

            }
            else
            {
                Dictionary<string, object> res = new Dictionary<string, object>(1);
                message = $"{response.StatusCode}: the access token could not be retreived from Google";
            }
        }

    }
    
    private void LogOut()
    {
        
        if (GlobalVariables.AccessToken == null)
        {
            message = "You are not logged in.";
            return;
        }
        
        GlobalVariables.AccessToken = null;
        
        message = "Logged Out Successfully";
        
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}




